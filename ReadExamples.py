# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ReadExamples', [dirname(__file__)])
        except ImportError:
            import _ReadExamples
            return _ReadExamples
        if fp is not None:
            try:
                _mod = imp.load_module('_ReadExamples', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ReadExamples = swig_import_helper()
    del swig_import_helper
else:
    import _ReadExamples
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def BufferType_GetVectorSize(*args):
  return _ReadExamples.BufferType_GetVectorSize(*args)
BufferType_GetVectorSize = _ReadExamples.BufferType_GetVectorSize

def BufferType_GetVector(*args):
  return _ReadExamples.BufferType_GetVector(*args)
BufferType_GetVector = _ReadExamples.BufferType_GetVector

def Write_GeneralExample(*args):
  return _ReadExamples.Write_GeneralExample(*args)
Write_GeneralExample = _ReadExamples.Write_GeneralExample

def Write_VectorExample(*args):
  return _ReadExamples.Write_VectorExample(*args)
Write_VectorExample = _ReadExamples.Write_VectorExample

def new_intp():
  return _ReadExamples.new_intp()
new_intp = _ReadExamples.new_intp

def copy_intp(*args):
  return _ReadExamples.copy_intp(*args)
copy_intp = _ReadExamples.copy_intp

def delete_intp(*args):
  return _ReadExamples.delete_intp(*args)
delete_intp = _ReadExamples.delete_intp

def intp_assign(*args):
  return _ReadExamples.intp_assign(*args)
intp_assign = _ReadExamples.intp_assign

def intp_value(*args):
  return _ReadExamples.intp_value(*args)
intp_value = _ReadExamples.intp_value

def new_floatp():
  return _ReadExamples.new_floatp()
new_floatp = _ReadExamples.new_floatp

def copy_floatp(*args):
  return _ReadExamples.copy_floatp(*args)
copy_floatp = _ReadExamples.copy_floatp

def delete_floatp(*args):
  return _ReadExamples.delete_floatp(*args)
delete_floatp = _ReadExamples.delete_floatp

def floatp_assign(*args):
  return _ReadExamples.floatp_assign(*args)
floatp_assign = _ReadExamples.floatp_assign

def floatp_value(*args):
  return _ReadExamples.floatp_value(*args)
floatp_value = _ReadExamples.floatp_value


